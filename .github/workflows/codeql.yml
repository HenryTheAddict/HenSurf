name: CodeQL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    env:
      DEPOT_TOOLS_DIR: ${{ github.workspace }}/depot_tools
      GCLIENT_CACHE_DIR: ${{ github.workspace }}/gclient_cache
      CODEQL_DB_LOC: ${{ github.workspace }}/codeql-db

    steps:
    - name: Free up runner disk space
      run: |
        set -e
        echo "Initial disk space:"
        df -h
        sudo rm -rf /usr/share/dotnet /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY" /usr/local/lib/android /opt/hostedtoolcache/CodeQL
        sudo swapoff /swapfile || true
        sudo rm -f /swapfile || true
        sudo apt-get clean
        echo "Disk space after cleanup:"
        df -h

    - name: Checkout HenSurf repository
      uses: actions/checkout@v4
      with:
        path: hensurf

    - name: Cache and Install depot_tools
      uses: actions/cache@v4
      id: cache-depot-tools
      with:
        path: ${{ env.DEPOT_TOOLS_DIR }}
        key: ${{ runner.os }}-depot-tools
    - if: steps.cache-depot-tools.outputs.cache-hit != 'true'
      run: git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git ${{ env.DEPOT_TOOLS_DIR }}
    - name: Add depot_tools to PATH
      run: echo "${{ env.DEPOT_TOOLS_DIR }}" >> $GITHUB_PATH

    - name: Cache GClient Dependencies
      uses: actions/cache@v4
      id: cache-gclient
      with:
        path: ${{ env.GCLIENT_CACHE_DIR }}
        key: ${{ runner.os }}-gclient-cache-${{ hashFiles('hensurf/**/DEPS') }}
        restore-keys: |
          ${{ runner.os }}-gclient-cache-

    - name: Fetch Chromium Source via Sparse Checkout
      run: |
        set -e
        mkdir -p chromium/src
        cd chromium/src
        git init -b main
        git remote add origin https://chromium.googlesource.com/chromium/src.git
        git config extensions.partialClone true
        git config core.sparseCheckout true
        cat <<EOF > .git/info/sparse-checkout
        /build
        /buildtools
        /components/search_engines/
        /components/version_info/
        /base/
        /url/
        /mojo/
        /services/
        /third_party/abseil-cpp/
        /tools/
        EOF
        LATEST_TAG_REF=$(git ls-remote --tags --sort="-v:refname" https://chromium.googlesource.com/chromium/src.git | grep -oP 'refs/tags/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
        if [ -z "$LATEST_TAG_REF" ]; then echo "Error: Could not determine latest stable Chromium tag." && exit 1; fi
        git fetch --depth=1 origin "$LATEST_TAG_REF"
        git checkout FETCH_HEAD

    - name: Sync Dependencies, Run Hooks, and Check for GN
      working-directory: ${{ github.workspace }}/chromium
      run: |
        set -e
        echo "Configuring gclient..."
        gclient config --spec 'solutions = [{"name": "src", "url": "https://chromium.googlesource.com/chromium/src.git", "managed": False}]'

        echo "Running gclient sync -D -j1..." # Added -j1
        gclient sync -D -j1

        echo "Running gclient runhooks -j1 explicitly..." # Added explicit runhooks
        gclient runhooks -j1
        echo "gclient runhooks completed."

        # Verify gn executable exists
        GN_EXECUTABLE="${{ github.workspace }}/chromium/src/buildtools/linux64/gn/gn"
        EXPECTED_GN_PATH_README="${{ github.workspace }}/chromium/src/buildtools/README.md"

        if [ -f "$GN_EXECUTABLE" ]; then
          echo "✅ gn executable found at $GN_EXECUTABLE."
        else
          echo "⚠️ gn executable NOT found at $GN_EXECUTABLE after gclient sync/runhooks."
          echo "Listing contents of ${{ github.workspace }}/chromium/src/buildtools/linux64/ to check if gn directory was created:"
          ls -la "${{ github.workspace }}/chromium/src/buildtools/linux64/"
          echo "Listing contents of ${{ github.workspace }}/chromium/src/buildtools/ to see available OS dirs:"
          ls -la "${{ github.workspace }}/chromium/src/buildtools/"

          # Check if the buildtools README exists, which might indicate partial success of tool fetching
          if [ -f "$EXPECTED_GN_PATH_README" ]; then
            echo "ℹ️ Found buildtools README: $EXPECTED_GN_PATH_README. buildtools downloaded some content."
          else
            echo "⚠️ Did not find buildtools README: $EXPECTED_GN_PATH_README. buildtools might be missing entirely."
          fi

          echo "Attempting to locate gn in depot_tools..."
          DEPOT_TOOLS_GN_PATH="${{ env.DEPOT_TOOLS_DIR }}/gn"

          if [ -f "$DEPOT_TOOLS_GN_PATH" ] && [ -x "$DEPOT_TOOLS_GN_PATH" ]; then
            echo "Found gn in depot_tools at $DEPOT_TOOLS_GN_PATH."
            TARGET_GN_DIR="${{ github.workspace }}/chromium/src/buildtools/linux64/gn"
            mkdir -p "$TARGET_GN_DIR"
            echo "Copying gn from $DEPOT_TOOLS_GN_PATH to $TARGET_GN_DIR/gn..."
            cp "$DEPOT_TOOLS_GN_PATH" "$TARGET_GN_DIR/gn"
            if [ -f "$TARGET_GN_DIR/gn" ]; then
              echo "✅ Successfully copied gn to $TARGET_GN_DIR/gn."
              chmod +x "$TARGET_GN_DIR/gn"
            else
              echo "❌ Failed to copy gn from depot_tools to $TARGET_GN_DIR/gn."
              # exit 1 # Decide if this should be a fatal error for CodeQL
            fi
          else
            echo "❌ gn not found in depot_tools at $DEPOT_TOOLS_GN_PATH or it's not executable."
            # exit 1 # Decide if this should be a fatal error for CodeQL
          fi
        fi

    - name: Apply HenSurf Patches
      working-directory: ${{ github.workspace }}/chromium/src
      run: |
        set -e
        chmod +x ${{ github.workspace }}/hensurf/scripts/apply-patches.sh
        CHROMIUM_SRC_DIR="${{ github.workspace }}/chromium/src" \
        bash ${{ github.workspace }}/hensurf/scripts/apply-patches.sh --no-fetch

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        queries: security-extended
        db-location: ${{ env.CODEQL_DB_LOC }}
        paths: |
          chromium/src/components/search_engines/
          chromium/src/components/version_info/
        ram: 2048
        threads: 2

    - name: Build Components for CodeQL Tracing
      working-directory: ${{ github.workspace }}/chromium/src
      shell: bash
      run: |
        set -e
        gn gen ${{ github.workspace }}/chromium/out/CodeQL --args='
          is_debug=false
          is_clang=true
          symbol_level=0
          treat_warnings_as_errors=false
          is_component_build=false
          enable_nacl=false
          use_rtti=true
          proprietary_codecs=false
          enable_widevine=false
          enable_webrtc=false
          use_ozone=true
          ozone_platform_headless=true
        '
        autoninja -C ${{ github.workspace }}/chromium/out/CodeQL components/search_engines components/version_info

    - name: Clean build artifacts before analysis
      run: |
        set -e
        echo "Disk space before final cleanup:"
        df -h
        rm -rf ${{ github.workspace }}/chromium
        rm -rf ${{ env.GCLIENT_CACHE_DIR }}
        rm -rf ${{ env.DEPOT_TOOLS_DIR }}
        echo "Disk space after final cleanup:"
        df -h

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:cpp"
        ram: 0
        threads: 0
