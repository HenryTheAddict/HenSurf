name: CodeQL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'

jobs:
  analyze:
    name: Analyze
    # WARNING: A full Chromium checkout and build requires significant disk space (>100GB) and memory.
    # Standard GitHub-hosted runners might be insufficient or very slow.
    # Consider using larger runners (if available on your plan) or self-hosted runners.
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    env:
      # IMPORTANT: Set this to a specific Git tag or commit hash from Chromium for stable CI.
      # Example: '120.0.6099.109' (a recent tag at time of writing, check for latest stable/branch)
      CHROMIUM_VERSION_TAG: 'YOUR_TARGET_CHROMIUM_TAG_OR_HASH'
      DEPOT_TOOLS_DIR: ${{ github.workspace }}/depot_tools

    steps:
    - name: Checkout HenSurf repository
      uses: actions/checkout@v4
      with:
        path: hensurf # Checks out HenSurf into ${{ github.workspace }}/hensurf

    - name: Install depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git ${{ env.DEPOT_TOOLS_DIR }}
        echo "${{ env.DEPOT_TOOLS_DIR }}" >> $GITHUB_PATH

    - name: Check CHROMIUM_VERSION_TAG
      run: |
        if [ "${{ env.CHROMIUM_VERSION_TAG }}" == "YOUR_TARGET_CHROMIUM_TAG_OR_HASH" ]; then
          echo "Error: You must set the CHROMIUM_VERSION_TAG environment variable to a specific Chromium Git tag or commit hash."
          exit 1
        fi

    - name: Fetch pinned Chromium version
      working-directory: ${{ github.workspace }} # Ensures 'chromium' is created at workspace root
      run: |
        echo "Fetching Chromium version: ${{ env.CHROMIUM_VERSION_TAG }}"
        mkdir chromium && cd chromium
        gclient config --spec 'solutions = [
          {
            "name": "src",
            "url": "https://chromium.googlesource.com/chromium/src.git@" + "${{ env.CHROMIUM_VERSION_TAG }}",
            "managed": False,
            "custom_deps": {},
            "custom_vars": {
                "checkout_pgo_profiles": False,
                "checkout_nacl": False,
                "checkout_ios_webkit": False,
                "checkout_reclient": False,
                "checkout_android": False,
                "checkout_fuchsia": False,
                "checkout_cast": False,
                "checkout_chromeos": False,
            },
          },
        ]
        target_os = ["linux"]
        cache_dir = "${{ github.workspace }}/cache_dir"'
        gclient sync --no-history --nohooks -j8 --revision ${{ env.CHROMIUM_VERSION_TAG }} -D --with_branch_heads --with_tags

    - name: Run gclient runhooks
      working-directory: ${{ github.workspace }}/chromium # gclient needs to run where .gclient file is
      run: |
        gclient runhooks -j8

    - name: Apply HenSurf patches
      # Patches must be applied to the chromium source, which is now at ${{ github.workspace }}/chromium/src
      working-directory: ${{ github.workspace }}/chromium/src
      run: |
        # Ensure the HenSurf scripts are executable
        chmod +x ${{ github.workspace }}/hensurf/scripts/apply-patches.sh
        bash ${{ github.workspace }}/hensurf/scripts/apply-patches.sh --no-fetch

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        queries: security-extended
        # By not specifying build-mode, CodeQL will attempt to trace the build commands
        # that follow this step. The CodeQL CLI will be available in the PATH.

    # This step replaces the old 'Autobuild' step.
    # CodeQL's init action (above) sets up tracers that will monitor the build commands run here.
    - name: Build HenSurf components for CodeQL
      working-directory: ${{ github.workspace }}/chromium/src # GN and Ninja are typically run from here
      shell: bash # Ensure bash is used for complex commands like gn args
      run: |
        echo "Starting build for CodeQL tracing..."
        # Setup GN args - these should be consistent with how HenSurf is normally built.
        # is_debug=true can help CodeQL analysis.
        # symbol_level=1 or 2 might be needed for better data for CodeQL.
        # treat_warnings_as_errors=false is important to ensure the build completes for analysis.
        gn gen ${{ github.workspace }}/chromium/out/CodeQL --args='
          is_debug=true
          is_clang=true
          symbol_level=1
          treat_warnings_as_errors=false
          enable_nacl=false
          use_rtti=true
        '

        # Build specific targets relevant to HenSurf's C++ code.
        # IMPORTANT: These targets must be the actualninja targets that compile HenSurf's C++ files
        # (e.g., hensurf_engines.cc, hensurf_version_info.cc).
        # If these files are part of larger component targets, list those.
        # Example placeholder targets:
        echo "Building HenSurf specific targets (components/search_engines, components/version_info)..."
        autoninja -C ${{ github.workspace }}/chromium/out/CodeQL components/search_engines components/version_info

        # If HenSurf files reside in other or more specific targets, adjust the line above.
        # For example:
        # autoninja -C ${{ github.workspace }}/chromium/out/CodeQL path/to/hensurf_target_1 path/to/hensurf_target_2
        echo "Build for CodeQL tracing finished."

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        # Optional: Specify where CodeQL should find the database if not default.
        # Usually, CodeQL figures this out automatically after the build.
        # database: ${{ github.workspace }}/codeql_databases/cpp
        category: "/language:cpp" # Optional: For better categorization of results
